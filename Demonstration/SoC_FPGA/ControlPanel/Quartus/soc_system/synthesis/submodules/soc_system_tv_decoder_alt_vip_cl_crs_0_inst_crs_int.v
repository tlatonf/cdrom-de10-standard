// soc_system_tv_decoder_alt_vip_cl_crs_0_inst_crs_int.v

// This file was auto-generated from alt_vip_cl_crs_422_to_var_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module soc_system_tv_decoder_alt_vip_cl_crs_0_inst_crs_int (
		input  wire        main_clock_clk,              //    main_clock.clk
		input  wire        main_reset_reset,            //    main_reset.reset
		input  wire        av_st_din_valid,             //     av_st_din.valid
		input  wire        av_st_din_startofpacket,     //              .startofpacket
		input  wire        av_st_din_endofpacket,       //              .endofpacket
		input  wire [47:0] av_st_din_data,              //              .data
		output wire        av_st_din_ready,             //              .ready
		output wire        av_st_dout_valid,            //    av_st_dout.valid
		output wire        av_st_dout_startofpacket,    //              .startofpacket
		output wire        av_st_dout_endofpacket,      //              .endofpacket
		output wire [55:0] av_st_dout_data,             //              .data
		input  wire        av_st_dout_ready,            //              .ready
		input  wire        av_st_vib_cmd_valid,         // av_st_vib_cmd.valid
		input  wire        av_st_vib_cmd_startofpacket, //              .startofpacket
		input  wire        av_st_vib_cmd_endofpacket,   //              .endofpacket
		input  wire [63:0] av_st_vib_cmd_data,          //              .data
		output wire        av_st_vib_cmd_ready,         //              .ready
		input  wire        av_st_mm_cmd_valid,          //  av_st_mm_cmd.valid
		input  wire        av_st_mm_cmd_startofpacket,  //              .startofpacket
		input  wire        av_st_mm_cmd_endofpacket,    //              .endofpacket
		input  wire [63:0] av_st_mm_cmd_data,           //              .data
		output wire        av_st_mm_cmd_ready           //              .ready
	);

	wire         video_in_cmd_av_st_dout_valid;           // video_in_cmd:av_st_dout_valid -> pip_other:av_st_din_valid
	wire  [47:0] video_in_cmd_av_st_dout_data;            // video_in_cmd:av_st_dout_data -> pip_other:av_st_din_data
	wire         video_in_cmd_av_st_dout_ready;           // pip_other:av_st_din_ready -> video_in_cmd:av_st_dout_ready
	wire         video_in_cmd_av_st_dout_startofpacket;   // video_in_cmd:av_st_dout_startofpacket -> pip_other:av_st_din_startofpacket
	wire         video_in_cmd_av_st_dout_endofpacket;     // video_in_cmd:av_st_dout_endofpacket -> pip_other:av_st_din_endofpacket
	wire         pip_other_av_st_dout_valid;              // pip_other:av_st_dout_valid -> middle_demux:av_st_din_valid
	wire  [47:0] pip_other_av_st_dout_data;               // pip_other:av_st_dout_data -> middle_demux:av_st_din_data
	wire         pip_other_av_st_dout_ready;              // middle_demux:av_st_din_ready -> pip_other:av_st_dout_ready
	wire         pip_other_av_st_dout_startofpacket;      // pip_other:av_st_dout_startofpacket -> middle_demux:av_st_din_startofpacket
	wire         pip_other_av_st_dout_endofpacket;        // pip_other:av_st_dout_endofpacket -> middle_demux:av_st_din_endofpacket
	wire         middle_demux_av_st_dout_0_valid;         // middle_demux:av_st_dout_valid_0 -> horiz_upsample:av_st_din_valid
	wire  [47:0] middle_demux_av_st_dout_0_data;          // middle_demux:av_st_dout_data_0 -> horiz_upsample:av_st_din_data
	wire         middle_demux_av_st_dout_0_ready;         // horiz_upsample:av_st_din_ready -> middle_demux:av_st_dout_ready_0
	wire         middle_demux_av_st_dout_0_startofpacket; // middle_demux:av_st_dout_startofpacket_0 -> horiz_upsample:av_st_din_startofpacket
	wire         middle_demux_av_st_dout_0_endofpacket;   // middle_demux:av_st_dout_endofpacket_0 -> horiz_upsample:av_st_din_endofpacket
	wire         middle_demux_av_st_dout_1_valid;         // middle_demux:av_st_dout_valid_1 -> symbol_conv:av_st_din_valid
	wire  [47:0] middle_demux_av_st_dout_1_data;          // middle_demux:av_st_dout_data_1 -> symbol_conv:av_st_din_data
	wire         middle_demux_av_st_dout_1_ready;         // symbol_conv:av_st_din_ready -> middle_demux:av_st_dout_ready_1
	wire         middle_demux_av_st_dout_1_startofpacket; // middle_demux:av_st_dout_startofpacket_1 -> symbol_conv:av_st_din_startofpacket
	wire         middle_demux_av_st_dout_1_endofpacket;   // middle_demux:av_st_dout_endofpacket_1 -> symbol_conv:av_st_din_endofpacket
	wire         horiz_upsample_av_st_dout_valid;         // horiz_upsample:av_st_dout_valid -> middle_mux:av_st_din_valid_0
	wire  [55:0] horiz_upsample_av_st_dout_data;          // horiz_upsample:av_st_dout_data -> middle_mux:av_st_din_data_0
	wire         horiz_upsample_av_st_dout_ready;         // middle_mux:av_st_din_ready_0 -> horiz_upsample:av_st_dout_ready
	wire         horiz_upsample_av_st_dout_startofpacket; // horiz_upsample:av_st_dout_startofpacket -> middle_mux:av_st_din_startofpacket_0
	wire         horiz_upsample_av_st_dout_endofpacket;   // horiz_upsample:av_st_dout_endofpacket -> middle_mux:av_st_din_endofpacket_0
	wire         symbol_conv_av_st_dout_valid;            // symbol_conv:av_st_dout_valid -> middle_mux:av_st_din_valid_1
	wire  [55:0] symbol_conv_av_st_dout_data;             // symbol_conv:av_st_dout_data -> middle_mux:av_st_din_data_1
	wire         symbol_conv_av_st_dout_ready;            // middle_mux:av_st_din_ready_1 -> symbol_conv:av_st_dout_ready
	wire         symbol_conv_av_st_dout_startofpacket;    // symbol_conv:av_st_dout_startofpacket -> middle_mux:av_st_din_startofpacket_1
	wire         symbol_conv_av_st_dout_endofpacket;      // symbol_conv:av_st_dout_endofpacket -> middle_mux:av_st_din_endofpacket_1
	wire  [95:0] middle_demux_av_st_dout_data;            // port fragment
	wire   [1:0] middle_demux_av_st_dout_valid;           // port fragment
	wire   [1:0] middle_demux_av_st_dout_startofpacket;   // port fragment
	wire   [1:0] middle_demux_av_st_dout_endofpacket;     // port fragment
	wire   [1:0] middle_mux_av_st_din_ready;              // port fragment

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (2),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) video_in_cmd (
		.clock                    (main_clock_clk),                        // main_clock.clk
		.reset                    (main_reset_reset),                      // main_reset.reset
		.av_st_cmd_valid          (av_st_vib_cmd_valid),                   //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (av_st_vib_cmd_startofpacket),           //           .startofpacket
		.av_st_cmd_endofpacket    (av_st_vib_cmd_endofpacket),             //           .endofpacket
		.av_st_cmd_data           (av_st_vib_cmd_data),                    //           .data
		.av_st_cmd_ready          (av_st_vib_cmd_ready),                   //           .ready
		.av_st_din_valid          (av_st_din_valid),                       //  av_st_din.valid
		.av_st_din_startofpacket  (av_st_din_startofpacket),               //           .startofpacket
		.av_st_din_endofpacket    (av_st_din_endofpacket),                 //           .endofpacket
		.av_st_din_data           (av_st_din_data),                        //           .data
		.av_st_din_ready          (av_st_din_ready),                       //           .ready
		.av_st_dout_valid         (video_in_cmd_av_st_dout_valid),         // av_st_dout.valid
		.av_st_dout_startofpacket (video_in_cmd_av_st_dout_startofpacket), //           .startofpacket
		.av_st_dout_endofpacket   (video_in_cmd_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_dout_data          (video_in_cmd_av_st_dout_data),          //           .data
		.av_st_dout_ready         (video_in_cmd_av_st_dout_ready)          //           .ready
	);

	alt_vip_pip_converter_core #(
		.PIXEL_WIDTH            (16),
		.PIXELS_IN_PARALLEL_IN  (1),
		.PIXELS_IN_PARALLEL_OUT (1),
		.PIPELINE_READY         (0),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8),
		.INPUT_FIFO_DEPTH       (0),
		.OUTPUT_FIFO_DEPTH      (0)
	) pip_other (
		.clock                    (main_clock_clk),                        // main_clock.clk
		.reset                    (main_reset_reset),                      // main_reset.reset
		.av_st_din_valid          (video_in_cmd_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (video_in_cmd_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (video_in_cmd_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (video_in_cmd_av_st_dout_data),          //           .data
		.av_st_din_ready          (video_in_cmd_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (pip_other_av_st_dout_valid),            // av_st_dout.valid
		.av_st_dout_startofpacket (pip_other_av_st_dout_startofpacket),    //           .startofpacket
		.av_st_dout_endofpacket   (pip_other_av_st_dout_endofpacket),      //           .endofpacket
		.av_st_dout_data          (pip_other_av_st_dout_data),             //           .data
		.av_st_dout_ready         (pip_other_av_st_dout_ready)             //           .ready
	);

	alt_vip_packet_demux #(
		.NUM_OUTPUTS        (2),
		.CLIP_ADDRESS_BITS  (0),
		.SHIFT_ADDRESS_BITS (0),
		.REGISTER_OUTPUT    (1),
		.PIPELINE_READY     (0),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.DATA_WIDTH_INT     (16),
		.USER_WIDTH_INT     (0)
	) middle_demux (
		.clock                    (main_clock_clk),                                                                      //   main_clock.clk
		.reset                    (main_reset_reset),                                                                    //   main_reset.reset
		.av_st_din_valid          (pip_other_av_st_dout_valid),                                                          //    av_st_din.valid
		.av_st_din_startofpacket  (pip_other_av_st_dout_startofpacket),                                                  //             .startofpacket
		.av_st_din_endofpacket    (pip_other_av_st_dout_endofpacket),                                                    //             .endofpacket
		.av_st_din_data           (pip_other_av_st_dout_data),                                                           //             .data
		.av_st_din_ready          (pip_other_av_st_dout_ready),                                                          //             .ready
		.av_st_dout_valid         ({middle_demux_av_st_dout_valid[1],middle_demux_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({middle_demux_av_st_dout_startofpacket[1],middle_demux_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({middle_demux_av_st_dout_endofpacket[1],middle_demux_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({middle_demux_av_st_dout_data[95:48],middle_demux_av_st_dout_data[47:0]}),            //             .data
		.av_st_dout_ready         ({middle_demux_av_st_dout_1_ready,middle_demux_av_st_dout_0_ready})                    //             .ready
	);

	alt_vip_crs_h_up_core #(
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.BITS_PER_SYMBOL              (8),
		.PIXELS_IN_PARALLEL           (1),
		.ALGORITHM                    ("NEAREST_NEIGHBOUR"),
		.CO_SITING                    ("LEFT"),
		.ENABLE_LUMA_ADAPT            (0),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.CYCLONE_STYLE                (0),
		.V_SERIES_STYLE               (1)
	) horiz_upsample (
		.clock                    (main_clock_clk),                          // main_clock.clk
		.reset                    (main_reset_reset),                        // main_reset.reset
		.av_st_din_valid          (middle_demux_av_st_dout_0_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (middle_demux_av_st_dout_0_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (middle_demux_av_st_dout_0_endofpacket),   //           .endofpacket
		.av_st_din_data           (middle_demux_av_st_dout_0_data),          //           .data
		.av_st_din_ready          (middle_demux_av_st_dout_0_ready),         //           .ready
		.av_st_dout_valid         (horiz_upsample_av_st_dout_valid),         // av_st_dout.valid
		.av_st_dout_startofpacket (horiz_upsample_av_st_dout_startofpacket), //           .startofpacket
		.av_st_dout_endofpacket   (horiz_upsample_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_dout_data          (horiz_upsample_av_st_dout_data),          //           .data
		.av_st_dout_ready         (horiz_upsample_av_st_dout_ready)          //           .ready
	);

	alt_vip_cpp_converter #(
		.BITS_PER_SYMBOL            (8),
		.NUMBER_OF_COLOR_PLANES_IN  (2),
		.NUMBER_OF_COLOR_PLANES_OUT (3),
		.PIXELS_IN_PARALLEL_IN      (1),
		.PIXELS_IN_PARALLEL_OUT     (1),
		.PIPELINE_READY             (0),
		.SRC_WIDTH                  (8),
		.DST_WIDTH                  (8),
		.CONTEXT_WIDTH              (8),
		.TASK_WIDTH                 (8)
	) symbol_conv (
		.clock                    (main_clock_clk),                          // main_clock.clk
		.reset                    (main_reset_reset),                        // main_reset.reset
		.av_st_din_valid          (middle_demux_av_st_dout_1_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (middle_demux_av_st_dout_1_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (middle_demux_av_st_dout_1_endofpacket),   //           .endofpacket
		.av_st_din_data           (middle_demux_av_st_dout_1_data),          //           .data
		.av_st_din_ready          (middle_demux_av_st_dout_1_ready),         //           .ready
		.av_st_dout_valid         (symbol_conv_av_st_dout_valid),            // av_st_dout.valid
		.av_st_dout_startofpacket (symbol_conv_av_st_dout_startofpacket),    //           .startofpacket
		.av_st_dout_endofpacket   (symbol_conv_av_st_dout_endofpacket),      //           .endofpacket
		.av_st_dout_data          (symbol_conv_av_st_dout_data),             //           .data
		.av_st_dout_ready         (symbol_conv_av_st_dout_ready)             //           .ready
	);

	alt_vip_packet_mux #(
		.NUM_INPUTS      (2),
		.REGISTER_OUTPUT (0),
		.PIPELINE_READY  (0),
		.NAME            ("undefined"),
		.SRC_WIDTH       (8),
		.DST_WIDTH       (8),
		.CONTEXT_WIDTH   (8),
		.TASK_WIDTH      (8),
		.DATA_WIDTH_INT  (24),
		.USER_WIDTH_INT  (0)
	) middle_mux (
		.clock                    (main_clock_clk),                                                                 //  main_clock.clk
		.reset                    (main_reset_reset),                                                               //  main_reset.reset
		.av_st_cmd_valid          (av_st_mm_cmd_valid),                                                             //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (av_st_mm_cmd_startofpacket),                                                     //            .startofpacket
		.av_st_cmd_endofpacket    (av_st_mm_cmd_endofpacket),                                                       //            .endofpacket
		.av_st_cmd_data           (av_st_mm_cmd_data),                                                              //            .data
		.av_st_cmd_ready          (av_st_mm_cmd_ready),                                                             //            .ready
		.av_st_din_valid          ({symbol_conv_av_st_dout_valid,horiz_upsample_av_st_dout_valid}),                 // av_st_din_0.valid
		.av_st_din_startofpacket  ({symbol_conv_av_st_dout_startofpacket,horiz_upsample_av_st_dout_startofpacket}), //            .startofpacket
		.av_st_din_endofpacket    ({symbol_conv_av_st_dout_endofpacket,horiz_upsample_av_st_dout_endofpacket}),     //            .endofpacket
		.av_st_din_data           ({symbol_conv_av_st_dout_data[55:0],horiz_upsample_av_st_dout_data[55:0]}),       //            .data
		.av_st_din_ready          ({middle_mux_av_st_din_ready[1],middle_mux_av_st_din_ready[0]}),                  //            .ready
		.av_st_dout_valid         (av_st_dout_valid),                                                               //  av_st_dout.valid
		.av_st_dout_startofpacket (av_st_dout_startofpacket),                                                       //            .startofpacket
		.av_st_dout_endofpacket   (av_st_dout_endofpacket),                                                         //            .endofpacket
		.av_st_dout_data          (av_st_dout_data),                                                                //            .data
		.av_st_dout_ready         (av_st_dout_ready)                                                                //            .ready
	);

	assign middle_demux_av_st_dout_0_valid = { middle_demux_av_st_dout_valid[0] };

	assign middle_demux_av_st_dout_0_data = { middle_demux_av_st_dout_data[47:0] };

	assign middle_demux_av_st_dout_0_startofpacket = { middle_demux_av_st_dout_startofpacket[0] };

	assign middle_demux_av_st_dout_0_endofpacket = { middle_demux_av_st_dout_endofpacket[0] };

	assign middle_demux_av_st_dout_1_valid = { middle_demux_av_st_dout_valid[1] };

	assign middle_demux_av_st_dout_1_data = { middle_demux_av_st_dout_data[95:48] };

	assign middle_demux_av_st_dout_1_startofpacket = { middle_demux_av_st_dout_startofpacket[1] };

	assign middle_demux_av_st_dout_1_endofpacket = { middle_demux_av_st_dout_endofpacket[1] };

	assign horiz_upsample_av_st_dout_ready = { middle_mux_av_st_din_ready[0] };

	assign symbol_conv_av_st_dout_ready = { middle_mux_av_st_din_ready[1] };

endmodule
