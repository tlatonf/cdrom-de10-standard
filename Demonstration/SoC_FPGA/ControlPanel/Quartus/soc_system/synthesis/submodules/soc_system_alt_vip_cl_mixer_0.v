// soc_system_alt_vip_cl_mixer_0.v

// This file was auto-generated from alt_vip_cl_mixer_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module soc_system_alt_vip_cl_mixer_0 #(
		parameter BITS_PER_SYMBOL              = 8,
		parameter NUMBER_OF_COLOR_PLANES       = 2,
		parameter COLOR_PLANES_ARE_IN_PARALLEL = 1,
		parameter PIXELS_IN_PARALLEL           = 1,
		parameter MAX_WIDTH                    = 1024,
		parameter MAX_HEIGHT                   = 768,
		parameter IS_422                       = 1,
		parameter USER_PACKET_SUPPORT          = "PASSTHROUGH",
		parameter USER_PACKET_FIFO_DEPTH       = 0
	) (
		input  wire        main_clock_clk,        // main_clock.clk
		input  wire        main_reset_reset,      // main_reset.reset
		input  wire [23:0] din0_data,             //       din0.data
		input  wire        din0_valid,            //           .valid
		input  wire        din0_startofpacket,    //           .startofpacket
		input  wire        din0_endofpacket,      //           .endofpacket
		output wire        din0_ready,            //           .ready
		input  wire [23:0] din1_data,             //       din1.data
		input  wire        din1_valid,            //           .valid
		input  wire        din1_startofpacket,    //           .startofpacket
		input  wire        din1_endofpacket,      //           .endofpacket
		output wire        din1_ready,            //           .ready
		output wire [23:0] dout_data,             //       dout.data
		output wire        dout_valid,            //           .valid
		output wire        dout_startofpacket,    //           .startofpacket
		output wire        dout_endofpacket,      //           .endofpacket
		input  wire        dout_ready,            //           .ready
		input  wire [6:0]  control_address,       //    control.address
		input  wire [3:0]  control_byteenable,    //           .byteenable
		input  wire        control_write,         //           .write
		input  wire [31:0] control_writedata,     //           .writedata
		input  wire        control_read,          //           .read
		output wire [31:0] control_readdata,      //           .readdata
		output wire        control_readdatavalid, //           .readdatavalid
		output wire        control_waitrequest    //           .waitrequest
	);

	wire          scheduler_cmd_mux_valid;                // scheduler:cmd_mux_valid -> user_mux:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_mux_data;                 // scheduler:cmd_mux_data -> user_mux:av_st_cmd_data
	wire          scheduler_cmd_mux_ready;                // user_mux:av_st_cmd_ready -> scheduler:cmd_mux_ready
	wire          scheduler_cmd_mux_startofpacket;        // scheduler:cmd_mux_startofpacket -> user_mux:av_st_cmd_startofpacket
	wire          scheduler_cmd_mux_endofpacket;          // scheduler:cmd_mux_endofpacket -> user_mux:av_st_cmd_endofpacket
	wire          scheduler_cmd_tpg_valid;                // scheduler:cmd_tpg_valid -> tpg:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_tpg_data;                 // scheduler:cmd_tpg_data -> tpg:av_st_cmd_data
	wire          scheduler_cmd_tpg_ready;                // tpg:av_st_cmd_ready -> scheduler:cmd_tpg_ready
	wire          scheduler_cmd_tpg_startofpacket;        // scheduler:cmd_tpg_startofpacket -> tpg:av_st_cmd_startofpacket
	wire          scheduler_cmd_tpg_endofpacket;          // scheduler:cmd_tpg_endofpacket -> tpg:av_st_cmd_endofpacket
	wire          scheduler_cmd_mix_valid;                // scheduler:cmd_mix_valid -> mixer_core:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_mix_data;                 // scheduler:cmd_mix_data -> mixer_core:av_st_cmd_data
	wire          scheduler_cmd_mix_ready;                // mixer_core:av_st_cmd_ready -> scheduler:cmd_mix_ready
	wire          scheduler_cmd_mix_startofpacket;        // scheduler:cmd_mix_startofpacket -> mixer_core:av_st_cmd_startofpacket
	wire          scheduler_cmd_mix_endofpacket;          // scheduler:cmd_mix_endofpacket -> mixer_core:av_st_cmd_endofpacket
	wire          scheduler_cmd_vob_valid;                // scheduler:cmd_vob_valid -> vob:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_vob_data;                 // scheduler:cmd_vob_data -> vob:av_st_cmd_data
	wire          scheduler_cmd_vob_ready;                // vob:av_st_cmd_ready -> scheduler:cmd_vob_ready
	wire          scheduler_cmd_vob_startofpacket;        // scheduler:cmd_vob_startofpacket -> vob:av_st_cmd_startofpacket
	wire          scheduler_cmd_vob_endofpacket;          // scheduler:cmd_vob_endofpacket -> vob:av_st_cmd_endofpacket
	wire          scheduler_cmd_rtc_valid;                // scheduler:cmd_rtc_valid -> control:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_rtc_data;                 // scheduler:cmd_rtc_data -> control:av_st_cmd_data
	wire          scheduler_cmd_rtc_ready;                // control:av_st_cmd_ready -> scheduler:cmd_rtc_ready
	wire          scheduler_cmd_rtc_startofpacket;        // scheduler:cmd_rtc_startofpacket -> control:av_st_cmd_startofpacket
	wire          scheduler_cmd_rtc_endofpacket;          // scheduler:cmd_rtc_endofpacket -> control:av_st_cmd_endofpacket
	wire          control_av_st_resp_valid;               // control:av_st_resp_valid -> scheduler:resp_rtc_valid
	wire   [63:0] control_av_st_resp_data;                // control:av_st_resp_data -> scheduler:resp_rtc_data
	wire          control_av_st_resp_ready;               // scheduler:resp_rtc_ready -> control:av_st_resp_ready
	wire          control_av_st_resp_startofpacket;       // control:av_st_resp_startofpacket -> scheduler:resp_rtc_startofpacket
	wire          control_av_st_resp_endofpacket;         // control:av_st_resp_endofpacket -> scheduler:resp_rtc_endofpacket
	wire          vib_resp0_av_st_resp_valid;             // vib_resp0:av_st_resp_valid -> scheduler:resp_vib_valid_0
	wire   [63:0] vib_resp0_av_st_resp_data;              // vib_resp0:av_st_resp_data -> scheduler:resp_vib_data_0
	wire          vib_resp0_av_st_resp_ready;             // scheduler:resp_vib_ready_0 -> vib_resp0:av_st_resp_ready
	wire          vib_resp0_av_st_resp_startofpacket;     // vib_resp0:av_st_resp_startofpacket -> scheduler:resp_vib_startofpacket_0
	wire          vib_resp0_av_st_resp_endofpacket;       // vib_resp0:av_st_resp_endofpacket -> scheduler:resp_vib_endofpacket_0
	wire          scheduler_cmd_vib_0_valid;              // scheduler:cmd_vib_valid_0 -> vib_cmd0:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_vib_0_data;               // scheduler:cmd_vib_data_0 -> vib_cmd0:av_st_cmd_data
	wire          scheduler_cmd_vib_0_ready;              // vib_cmd0:av_st_cmd_ready -> scheduler:cmd_vib_ready_0
	wire          scheduler_cmd_vib_0_startofpacket;      // scheduler:cmd_vib_startofpacket_0 -> vib_cmd0:av_st_cmd_startofpacket
	wire          scheduler_cmd_vib_0_endofpacket;        // scheduler:cmd_vib_endofpacket_0 -> vib_cmd0:av_st_cmd_endofpacket
	wire          vib_resp1_av_st_resp_valid;             // vib_resp1:av_st_resp_valid -> scheduler:resp_vib_valid_1
	wire   [63:0] vib_resp1_av_st_resp_data;              // vib_resp1:av_st_resp_data -> scheduler:resp_vib_data_1
	wire          vib_resp1_av_st_resp_ready;             // scheduler:resp_vib_ready_1 -> vib_resp1:av_st_resp_ready
	wire          vib_resp1_av_st_resp_startofpacket;     // vib_resp1:av_st_resp_startofpacket -> scheduler:resp_vib_startofpacket_1
	wire          vib_resp1_av_st_resp_endofpacket;       // vib_resp1:av_st_resp_endofpacket -> scheduler:resp_vib_endofpacket_1
	wire          scheduler_cmd_vib_1_valid;              // scheduler:cmd_vib_valid_1 -> vib_cmd1:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_vib_1_data;               // scheduler:cmd_vib_data_1 -> vib_cmd1:av_st_cmd_data
	wire          scheduler_cmd_vib_1_ready;              // vib_cmd1:av_st_cmd_ready -> scheduler:cmd_vib_ready_1
	wire          scheduler_cmd_vib_1_startofpacket;      // scheduler:cmd_vib_startofpacket_1 -> vib_cmd1:av_st_cmd_startofpacket
	wire          scheduler_cmd_vib_1_endofpacket;        // scheduler:cmd_vib_endofpacket_1 -> vib_cmd1:av_st_cmd_endofpacket
	wire          tpg_av_st_dout_valid;                   // tpg:av_st_dout_valid -> mixer_core:av_st_background_valid
	wire   [55:0] tpg_av_st_dout_data;                    // tpg:av_st_dout_data -> mixer_core:av_st_background_data
	wire          tpg_av_st_dout_ready;                   // mixer_core:av_st_background_ready -> tpg:av_st_dout_ready
	wire          tpg_av_st_dout_startofpacket;           // tpg:av_st_dout_startofpacket -> mixer_core:av_st_background_startofpacket
	wire          tpg_av_st_dout_endofpacket;             // tpg:av_st_dout_endofpacket -> mixer_core:av_st_background_endofpacket
	wire          vib_resp0_av_st_dout_valid;             // vib_resp0:av_st_dout_valid -> vib_cmd0:av_st_din_valid
	wire   [55:0] vib_resp0_av_st_dout_data;              // vib_resp0:av_st_dout_data -> vib_cmd0:av_st_din_data
	wire          vib_resp0_av_st_dout_ready;             // vib_cmd0:av_st_din_ready -> vib_resp0:av_st_dout_ready
	wire          vib_resp0_av_st_dout_startofpacket;     // vib_resp0:av_st_dout_startofpacket -> vib_cmd0:av_st_din_startofpacket
	wire          vib_resp0_av_st_dout_endofpacket;       // vib_resp0:av_st_dout_endofpacket -> vib_cmd0:av_st_din_endofpacket
	wire          vib_cmd0_av_st_dout_valid;              // vib_cmd0:av_st_dout_valid -> user_demux0:av_st_din_valid
	wire   [55:0] vib_cmd0_av_st_dout_data;               // vib_cmd0:av_st_dout_data -> user_demux0:av_st_din_data
	wire          vib_cmd0_av_st_dout_ready;              // user_demux0:av_st_din_ready -> vib_cmd0:av_st_dout_ready
	wire          vib_cmd0_av_st_dout_startofpacket;      // vib_cmd0:av_st_dout_startofpacket -> user_demux0:av_st_din_startofpacket
	wire          vib_cmd0_av_st_dout_endofpacket;        // vib_cmd0:av_st_dout_endofpacket -> user_demux0:av_st_din_endofpacket
	wire          user_demux0_av_st_dout_0_valid;         // user_demux0:av_st_dout_valid_0 -> mixer_core:av_st_din_valid_0
	wire   [55:0] user_demux0_av_st_dout_0_data;          // user_demux0:av_st_dout_data_0 -> mixer_core:av_st_din_data_0
	wire          user_demux0_av_st_dout_0_ready;         // mixer_core:av_st_din_ready_0 -> user_demux0:av_st_dout_ready_0
	wire          user_demux0_av_st_dout_0_startofpacket; // user_demux0:av_st_dout_startofpacket_0 -> mixer_core:av_st_din_startofpacket_0
	wire          user_demux0_av_st_dout_0_endofpacket;   // user_demux0:av_st_dout_endofpacket_0 -> mixer_core:av_st_din_endofpacket_0
	wire          user_demux0_av_st_dout_1_valid;         // user_demux0:av_st_dout_valid_1 -> user_mux:av_st_din_valid_1
	wire   [55:0] user_demux0_av_st_dout_1_data;          // user_demux0:av_st_dout_data_1 -> user_mux:av_st_din_data_1
	wire          user_demux0_av_st_dout_1_ready;         // user_mux:av_st_din_ready_1 -> user_demux0:av_st_dout_ready_1
	wire          user_demux0_av_st_dout_1_startofpacket; // user_demux0:av_st_dout_startofpacket_1 -> user_mux:av_st_din_startofpacket_1
	wire          user_demux0_av_st_dout_1_endofpacket;   // user_demux0:av_st_dout_endofpacket_1 -> user_mux:av_st_din_endofpacket_1
	wire          vib_resp1_av_st_dout_valid;             // vib_resp1:av_st_dout_valid -> vib_cmd1:av_st_din_valid
	wire   [55:0] vib_resp1_av_st_dout_data;              // vib_resp1:av_st_dout_data -> vib_cmd1:av_st_din_data
	wire          vib_resp1_av_st_dout_ready;             // vib_cmd1:av_st_din_ready -> vib_resp1:av_st_dout_ready
	wire          vib_resp1_av_st_dout_startofpacket;     // vib_resp1:av_st_dout_startofpacket -> vib_cmd1:av_st_din_startofpacket
	wire          vib_resp1_av_st_dout_endofpacket;       // vib_resp1:av_st_dout_endofpacket -> vib_cmd1:av_st_din_endofpacket
	wire          vib_cmd1_av_st_dout_valid;              // vib_cmd1:av_st_dout_valid -> user_demux1:av_st_din_valid
	wire   [55:0] vib_cmd1_av_st_dout_data;               // vib_cmd1:av_st_dout_data -> user_demux1:av_st_din_data
	wire          vib_cmd1_av_st_dout_ready;              // user_demux1:av_st_din_ready -> vib_cmd1:av_st_dout_ready
	wire          vib_cmd1_av_st_dout_startofpacket;      // vib_cmd1:av_st_dout_startofpacket -> user_demux1:av_st_din_startofpacket
	wire          vib_cmd1_av_st_dout_endofpacket;        // vib_cmd1:av_st_dout_endofpacket -> user_demux1:av_st_din_endofpacket
	wire          user_demux1_av_st_dout_0_valid;         // user_demux1:av_st_dout_valid_0 -> mixer_core:av_st_din_valid_1
	wire   [55:0] user_demux1_av_st_dout_0_data;          // user_demux1:av_st_dout_data_0 -> mixer_core:av_st_din_data_1
	wire          user_demux1_av_st_dout_0_ready;         // mixer_core:av_st_din_ready_1 -> user_demux1:av_st_dout_ready_0
	wire          user_demux1_av_st_dout_0_startofpacket; // user_demux1:av_st_dout_startofpacket_0 -> mixer_core:av_st_din_startofpacket_1
	wire          user_demux1_av_st_dout_0_endofpacket;   // user_demux1:av_st_dout_endofpacket_0 -> mixer_core:av_st_din_endofpacket_1
	wire          user_demux1_av_st_dout_1_valid;         // user_demux1:av_st_dout_valid_1 -> user_mux:av_st_din_valid_2
	wire   [55:0] user_demux1_av_st_dout_1_data;          // user_demux1:av_st_dout_data_1 -> user_mux:av_st_din_data_2
	wire          user_demux1_av_st_dout_1_ready;         // user_mux:av_st_din_ready_2 -> user_demux1:av_st_dout_ready_1
	wire          user_demux1_av_st_dout_1_startofpacket; // user_demux1:av_st_dout_startofpacket_1 -> user_mux:av_st_din_startofpacket_2
	wire          user_demux1_av_st_dout_1_endofpacket;   // user_demux1:av_st_dout_endofpacket_1 -> user_mux:av_st_din_endofpacket_2
	wire          mixer_core_av_st_dout_valid;            // mixer_core:av_st_dout_valid -> user_mux:av_st_din_valid_0
	wire   [55:0] mixer_core_av_st_dout_data;             // mixer_core:av_st_dout_data -> user_mux:av_st_din_data_0
	wire          mixer_core_av_st_dout_ready;            // user_mux:av_st_din_ready_0 -> mixer_core:av_st_dout_ready
	wire          mixer_core_av_st_dout_startofpacket;    // mixer_core:av_st_dout_startofpacket -> user_mux:av_st_din_startofpacket_0
	wire          mixer_core_av_st_dout_endofpacket;      // mixer_core:av_st_dout_endofpacket -> user_mux:av_st_din_endofpacket_0
	wire          user_mux_av_st_dout_valid;              // user_mux:av_st_dout_valid -> vob:av_st_din_valid
	wire   [55:0] user_mux_av_st_dout_data;               // user_mux:av_st_dout_data -> vob:av_st_din_data
	wire          user_mux_av_st_dout_ready;              // vob:av_st_din_ready -> user_mux:av_st_dout_ready
	wire          user_mux_av_st_dout_startofpacket;      // user_mux:av_st_dout_startofpacket -> vob:av_st_din_startofpacket
	wire          user_mux_av_st_dout_endofpacket;        // user_mux:av_st_dout_endofpacket -> vob:av_st_din_endofpacket
	wire  [111:0] user_demux0_av_st_dout_data;            // port fragment
	wire    [1:0] user_demux0_av_st_dout_valid;           // port fragment
	wire    [1:0] user_demux0_av_st_dout_startofpacket;   // port fragment
	wire    [1:0] user_demux0_av_st_dout_endofpacket;     // port fragment
	wire  [111:0] user_demux1_av_st_dout_data;            // port fragment
	wire    [1:0] user_demux1_av_st_dout_valid;           // port fragment
	wire    [1:0] user_demux1_av_st_dout_startofpacket;   // port fragment
	wire    [1:0] user_demux1_av_st_dout_endofpacket;     // port fragment
	wire    [1:0] mixer_core_av_st_din_ready;             // port fragment
	wire    [1:0] scheduler_cmd_vib_valid;                // port fragment
	wire    [1:0] scheduler_cmd_vib_startofpacket;        // port fragment
	wire    [1:0] scheduler_cmd_vib_endofpacket;          // port fragment
	wire  [127:0] scheduler_cmd_vib_data;                 // port fragment
	wire    [1:0] scheduler_resp_vib_ready;               // port fragment
	wire    [2:0] user_mux_av_st_din_ready;               // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (BITS_PER_SYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bits_per_symbol_check ( .error(1'b1) );
		end
		if (NUMBER_OF_COLOR_PLANES != 2)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					number_of_color_planes_check ( .error(1'b1) );
		end
		if (COLOR_PLANES_ARE_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					color_planes_are_in_parallel_check ( .error(1'b1) );
		end
		if (PIXELS_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					pixels_in_parallel_check ( .error(1'b1) );
		end
		if (MAX_WIDTH != 1024)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_width_check ( .error(1'b1) );
		end
		if (MAX_HEIGHT != 768)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_height_check ( .error(1'b1) );
		end
		if (IS_422 != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_422_check ( .error(1'b1) );
		end
		if (USER_PACKET_SUPPORT != "PASSTHROUGH")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_support_check ( .error(1'b1) );
		end
		if (USER_PACKET_FIFO_DEPTH != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_fifo_depth_check ( .error(1'b1) );
		end
	endgenerate

	alt_vip_video_input_bridge_resp #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (1024),
		.VIB_MODE                     ("FULL"),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.MAX_WIDTH                    (1024),
		.MAX_HEIGHT                   (768),
		.ENABLE_RESOLUTION_CHECK      (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.PIPELINE_READY               (0),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_resp0 (
		.clock                       (main_clock_clk),                     //    main_clock.clk
		.reset                       (main_reset_reset),                   //    main_reset.reset
		.av_st_vid_din_data          (din0_data),                          // av_st_vid_din.data
		.av_st_vid_din_valid         (din0_valid),                         //              .valid
		.av_st_vid_din_startofpacket (din0_startofpacket),                 //              .startofpacket
		.av_st_vid_din_endofpacket   (din0_endofpacket),                   //              .endofpacket
		.av_st_vid_din_ready         (din0_ready),                         //              .ready
		.av_st_resp_valid            (vib_resp0_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib_resp0_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (vib_resp0_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (vib_resp0_av_st_resp_data),          //              .data
		.av_st_resp_ready            (vib_resp0_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (vib_resp0_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib_resp0_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (vib_resp0_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (vib_resp0_av_st_dout_data),          //              .data
		.av_st_dout_ready            (vib_resp0_av_st_dout_ready)          //              .ready
	);

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_cmd0 (
		.clock                    (main_clock_clk),                     // main_clock.clk
		.reset                    (main_reset_reset),                   // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_vib_0_valid),          //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_vib_0_startofpacket),  //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_vib_0_endofpacket),    //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_vib_0_data),           //           .data
		.av_st_cmd_ready          (scheduler_cmd_vib_0_ready),          //           .ready
		.av_st_din_valid          (vib_resp0_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (vib_resp0_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (vib_resp0_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (vib_resp0_av_st_dout_data),          //           .data
		.av_st_din_ready          (vib_resp0_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (vib_cmd0_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (vib_cmd0_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (vib_cmd0_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (vib_cmd0_av_st_dout_data),           //           .data
		.av_st_dout_ready         (vib_cmd0_av_st_dout_ready)           //           .ready
	);

	alt_vip_packet_demux #(
		.NUM_OUTPUTS        (2),
		.CLIP_ADDRESS_BITS  (0),
		.SHIFT_ADDRESS_BITS (0),
		.REGISTER_OUTPUT    (1),
		.PIPELINE_READY     (0),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.DATA_WIDTH_INT     (24),
		.USER_WIDTH_INT     (0)
	) user_demux0 (
		.clock                    (main_clock_clk),                                                                    //   main_clock.clk
		.reset                    (main_reset_reset),                                                                  //   main_reset.reset
		.av_st_din_valid          (vib_cmd0_av_st_dout_valid),                                                         //    av_st_din.valid
		.av_st_din_startofpacket  (vib_cmd0_av_st_dout_startofpacket),                                                 //             .startofpacket
		.av_st_din_endofpacket    (vib_cmd0_av_st_dout_endofpacket),                                                   //             .endofpacket
		.av_st_din_data           (vib_cmd0_av_st_dout_data),                                                          //             .data
		.av_st_din_ready          (vib_cmd0_av_st_dout_ready),                                                         //             .ready
		.av_st_dout_valid         ({user_demux0_av_st_dout_valid[1],user_demux0_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({user_demux0_av_st_dout_startofpacket[1],user_demux0_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({user_demux0_av_st_dout_endofpacket[1],user_demux0_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({user_demux0_av_st_dout_data[111:56],user_demux0_av_st_dout_data[55:0]}),           //             .data
		.av_st_dout_ready         ({user_demux0_av_st_dout_1_ready,user_demux0_av_st_dout_0_ready})                    //             .ready
	);

	alt_vip_video_input_bridge_resp #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (1024),
		.VIB_MODE                     ("FULL"),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.MAX_WIDTH                    (1024),
		.MAX_HEIGHT                   (768),
		.ENABLE_RESOLUTION_CHECK      (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.PIPELINE_READY               (0),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_resp1 (
		.clock                       (main_clock_clk),                     //    main_clock.clk
		.reset                       (main_reset_reset),                   //    main_reset.reset
		.av_st_vid_din_data          (din1_data),                          // av_st_vid_din.data
		.av_st_vid_din_valid         (din1_valid),                         //              .valid
		.av_st_vid_din_startofpacket (din1_startofpacket),                 //              .startofpacket
		.av_st_vid_din_endofpacket   (din1_endofpacket),                   //              .endofpacket
		.av_st_vid_din_ready         (din1_ready),                         //              .ready
		.av_st_resp_valid            (vib_resp1_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib_resp1_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (vib_resp1_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (vib_resp1_av_st_resp_data),          //              .data
		.av_st_resp_ready            (vib_resp1_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (vib_resp1_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib_resp1_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (vib_resp1_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (vib_resp1_av_st_dout_data),          //              .data
		.av_st_dout_ready            (vib_resp1_av_st_dout_ready)          //              .ready
	);

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_cmd1 (
		.clock                    (main_clock_clk),                     // main_clock.clk
		.reset                    (main_reset_reset),                   // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_vib_1_valid),          //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_vib_1_startofpacket),  //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_vib_1_endofpacket),    //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_vib_1_data),           //           .data
		.av_st_cmd_ready          (scheduler_cmd_vib_1_ready),          //           .ready
		.av_st_din_valid          (vib_resp1_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (vib_resp1_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (vib_resp1_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (vib_resp1_av_st_dout_data),          //           .data
		.av_st_din_ready          (vib_resp1_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (vib_cmd1_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (vib_cmd1_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (vib_cmd1_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (vib_cmd1_av_st_dout_data),           //           .data
		.av_st_dout_ready         (vib_cmd1_av_st_dout_ready)           //           .ready
	);

	alt_vip_packet_demux #(
		.NUM_OUTPUTS        (2),
		.CLIP_ADDRESS_BITS  (0),
		.SHIFT_ADDRESS_BITS (0),
		.REGISTER_OUTPUT    (1),
		.PIPELINE_READY     (0),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.DATA_WIDTH_INT     (24),
		.USER_WIDTH_INT     (0)
	) user_demux1 (
		.clock                    (main_clock_clk),                                                                    //   main_clock.clk
		.reset                    (main_reset_reset),                                                                  //   main_reset.reset
		.av_st_din_valid          (vib_cmd1_av_st_dout_valid),                                                         //    av_st_din.valid
		.av_st_din_startofpacket  (vib_cmd1_av_st_dout_startofpacket),                                                 //             .startofpacket
		.av_st_din_endofpacket    (vib_cmd1_av_st_dout_endofpacket),                                                   //             .endofpacket
		.av_st_din_data           (vib_cmd1_av_st_dout_data),                                                          //             .data
		.av_st_din_ready          (vib_cmd1_av_st_dout_ready),                                                         //             .ready
		.av_st_dout_valid         ({user_demux1_av_st_dout_valid[1],user_demux1_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({user_demux1_av_st_dout_startofpacket[1],user_demux1_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({user_demux1_av_st_dout_endofpacket[1],user_demux1_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({user_demux1_av_st_dout_data[111:56],user_demux1_av_st_dout_data[55:0]}),           //             .data
		.av_st_dout_ready         ({user_demux1_av_st_dout_1_ready,user_demux1_av_st_dout_0_ready})                    //             .ready
	);

	alt_vip_tpg_alg_core #(
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.MAX_WIDTH                    (1024),
		.MAX_HEIGHT                   (768),
		.BITS_PER_SYMBOL              (8),
		.PIXELS_IN_PARALLEL           (1),
		.OUTPUT_FORMAT                ("4.4.4"),
		.COLOR_SPACE                  ("RGB"),
		.INTERLACING                  ("prog"),
		.PATTERN                      ("uniform"),
		.UNIFORM_VALUE_RY             (128),
		.UNIFORM_VALUE_GCB            (128),
		.UNIFORM_VALUE_BCR            (128),
		.USE_BACKGROUND_AS_BORDER     (1),
		.COLOR_PLANES_ARE_IN_PARALLEL (1)
	) tpg (
		.clock                    (main_clock_clk),                  // main_clock.clk
		.reset                    (main_reset_reset),                // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_tpg_valid),         //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_tpg_startofpacket), //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_tpg_endofpacket),   //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_tpg_data),          //           .data
		.av_st_cmd_ready          (scheduler_cmd_tpg_ready),         //           .ready
		.av_st_dout_valid         (tpg_av_st_dout_valid),            // av_st_dout.valid
		.av_st_dout_startofpacket (tpg_av_st_dout_startofpacket),    //           .startofpacket
		.av_st_dout_endofpacket   (tpg_av_st_dout_endofpacket),      //           .endofpacket
		.av_st_dout_data          (tpg_av_st_dout_data),             //           .data
		.av_st_dout_ready         (tpg_av_st_dout_ready)             //           .ready
	);

	alt_vip_mix_alg_core #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.MAX_WIDTH                    (1024),
		.MAX_HEIGHT                   (768),
		.NO_OF_INPUTS                 (2),
		.PIXELS_IN_PARALLEL           (1),
		.ALPHA_ENABLE                 (0),
		.ALPHA_STREAMS_ENABLE         (0),
		.LAYER_POSITION_ENABLE        (0),
		.DATA_SRC_ADDRESS             (2),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) mixer_core (
		.clock                          (main_clock_clk),                                                                  //       main_clock.clk
		.reset                          (main_reset_reset),                                                                //       main_reset.reset
		.av_st_cmd_valid                (scheduler_cmd_mix_valid),                                                         //        av_st_cmd.valid
		.av_st_cmd_startofpacket        (scheduler_cmd_mix_startofpacket),                                                 //                 .startofpacket
		.av_st_cmd_endofpacket          (scheduler_cmd_mix_endofpacket),                                                   //                 .endofpacket
		.av_st_cmd_data                 (scheduler_cmd_mix_data),                                                          //                 .data
		.av_st_cmd_ready                (scheduler_cmd_mix_ready),                                                         //                 .ready
		.av_st_din_valid                ({user_demux1_av_st_dout_0_valid,user_demux0_av_st_dout_0_valid}),                 //      av_st_din_0.valid
		.av_st_din_startofpacket        ({user_demux1_av_st_dout_0_startofpacket,user_demux0_av_st_dout_0_startofpacket}), //                 .startofpacket
		.av_st_din_endofpacket          ({user_demux1_av_st_dout_0_endofpacket,user_demux0_av_st_dout_0_endofpacket}),     //                 .endofpacket
		.av_st_din_data                 ({user_demux1_av_st_dout_0_data[55:0],user_demux0_av_st_dout_0_data[55:0]}),       //                 .data
		.av_st_din_ready                ({mixer_core_av_st_din_ready[1],mixer_core_av_st_din_ready[0]}),                   //                 .ready
		.av_st_background_valid         (tpg_av_st_dout_valid),                                                            // av_st_background.valid
		.av_st_background_startofpacket (tpg_av_st_dout_startofpacket),                                                    //                 .startofpacket
		.av_st_background_endofpacket   (tpg_av_st_dout_endofpacket),                                                      //                 .endofpacket
		.av_st_background_data          (tpg_av_st_dout_data),                                                             //                 .data
		.av_st_background_ready         (tpg_av_st_dout_ready),                                                            //                 .ready
		.av_st_dout_valid               (mixer_core_av_st_dout_valid),                                                     //       av_st_dout.valid
		.av_st_dout_startofpacket       (mixer_core_av_st_dout_startofpacket),                                             //                 .startofpacket
		.av_st_dout_endofpacket         (mixer_core_av_st_dout_endofpacket),                                               //                 .endofpacket
		.av_st_dout_data                (mixer_core_av_st_dout_data),                                                      //                 .data
		.av_st_dout_ready               (mixer_core_av_st_dout_ready)                                                      //                 .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.SOP_PRE_ALIGNED              (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.NO_CONCATENATION             (0),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) vob (
		.clock                        (main_clock_clk),                    //     main_clock.clk
		.reset                        (main_reset_reset),                  //     main_reset.reset
		.av_st_cmd_valid              (scheduler_cmd_vob_valid),           //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (scheduler_cmd_vob_startofpacket),   //               .startofpacket
		.av_st_cmd_endofpacket        (scheduler_cmd_vob_endofpacket),     //               .endofpacket
		.av_st_cmd_data               (scheduler_cmd_vob_data),            //               .data
		.av_st_cmd_ready              (scheduler_cmd_vob_ready),           //               .ready
		.av_st_din_valid              (user_mux_av_st_dout_valid),         //      av_st_din.valid
		.av_st_din_startofpacket      (user_mux_av_st_dout_startofpacket), //               .startofpacket
		.av_st_din_endofpacket        (user_mux_av_st_dout_endofpacket),   //               .endofpacket
		.av_st_din_data               (user_mux_av_st_dout_data),          //               .data
		.av_st_din_ready              (user_mux_av_st_dout_ready),         //               .ready
		.av_st_vid_dout_data          (dout_data),                         // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_valid),                        //               .valid
		.av_st_vid_dout_startofpacket (dout_startofpacket),                //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_endofpacket),                  //               .endofpacket
		.av_st_vid_dout_ready         (dout_ready)                         //               .ready
	);

	alt_vip_mix_scheduler #(
		.FRAME_WIDTH            (1024),
		.FRAME_HEIGHT           (768),
		.NO_OF_INPUTS           (2),
		.RUNTIME_CONTROL        (1),
		.UNIFORM_VALUE_RY       (128),
		.UNIFORM_VALUE_GCB      (128),
		.UNIFORM_VALUE_BCR      (128),
		.USER_PACKETS_SUPPORTED (1),
		.ALPHA_ENABLE           (0),
		.LAYER_POSITION_ENABLE  (0),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8)
	) scheduler (
		.clock                  (main_clock_clk),                                                          // main_clock.clk
		.reset                  (main_reset_reset),                                                        // main_reset.reset
		.cmd_tpg_valid          (scheduler_cmd_tpg_valid),                                                 //    cmd_tpg.valid
		.cmd_tpg_startofpacket  (scheduler_cmd_tpg_startofpacket),                                         //           .startofpacket
		.cmd_tpg_endofpacket    (scheduler_cmd_tpg_endofpacket),                                           //           .endofpacket
		.cmd_tpg_data           (scheduler_cmd_tpg_data),                                                  //           .data
		.cmd_tpg_ready          (scheduler_cmd_tpg_ready),                                                 //           .ready
		.cmd_mix_valid          (scheduler_cmd_mix_valid),                                                 //    cmd_mix.valid
		.cmd_mix_startofpacket  (scheduler_cmd_mix_startofpacket),                                         //           .startofpacket
		.cmd_mix_endofpacket    (scheduler_cmd_mix_endofpacket),                                           //           .endofpacket
		.cmd_mix_data           (scheduler_cmd_mix_data),                                                  //           .data
		.cmd_mix_ready          (scheduler_cmd_mix_ready),                                                 //           .ready
		.cmd_vob_valid          (scheduler_cmd_vob_valid),                                                 //    cmd_vob.valid
		.cmd_vob_startofpacket  (scheduler_cmd_vob_startofpacket),                                         //           .startofpacket
		.cmd_vob_endofpacket    (scheduler_cmd_vob_endofpacket),                                           //           .endofpacket
		.cmd_vob_data           (scheduler_cmd_vob_data),                                                  //           .data
		.cmd_vob_ready          (scheduler_cmd_vob_ready),                                                 //           .ready
		.cmd_mux_valid          (scheduler_cmd_mux_valid),                                                 //    cmd_mux.valid
		.cmd_mux_startofpacket  (scheduler_cmd_mux_startofpacket),                                         //           .startofpacket
		.cmd_mux_endofpacket    (scheduler_cmd_mux_endofpacket),                                           //           .endofpacket
		.cmd_mux_data           (scheduler_cmd_mux_data),                                                  //           .data
		.cmd_mux_ready          (scheduler_cmd_mux_ready),                                                 //           .ready
		.cmd_vib_valid          ({scheduler_cmd_vib_valid[1],scheduler_cmd_vib_valid[0]}),                 //  cmd_vib_0.valid
		.cmd_vib_startofpacket  ({scheduler_cmd_vib_startofpacket[1],scheduler_cmd_vib_startofpacket[0]}), //           .startofpacket
		.cmd_vib_endofpacket    ({scheduler_cmd_vib_endofpacket[1],scheduler_cmd_vib_endofpacket[0]}),     //           .endofpacket
		.cmd_vib_data           ({scheduler_cmd_vib_data[127:64],scheduler_cmd_vib_data[63:0]}),           //           .data
		.cmd_vib_ready          ({scheduler_cmd_vib_1_ready,scheduler_cmd_vib_0_ready}),                   //           .ready
		.resp_vib_valid         ({vib_resp1_av_st_resp_valid,vib_resp0_av_st_resp_valid}),                 // resp_vib_0.valid
		.resp_vib_startofpacket ({vib_resp1_av_st_resp_startofpacket,vib_resp0_av_st_resp_startofpacket}), //           .startofpacket
		.resp_vib_endofpacket   ({vib_resp1_av_st_resp_endofpacket,vib_resp0_av_st_resp_endofpacket}),     //           .endofpacket
		.resp_vib_data          ({vib_resp1_av_st_resp_data[63:0],vib_resp0_av_st_resp_data[63:0]}),       //           .data
		.resp_vib_ready         ({scheduler_resp_vib_ready[1],scheduler_resp_vib_ready[0]}),               //           .ready
		.cmd_rtc_valid          (scheduler_cmd_rtc_valid),                                                 //    cmd_rtc.valid
		.cmd_rtc_startofpacket  (scheduler_cmd_rtc_startofpacket),                                         //           .startofpacket
		.cmd_rtc_endofpacket    (scheduler_cmd_rtc_endofpacket),                                           //           .endofpacket
		.cmd_rtc_data           (scheduler_cmd_rtc_data),                                                  //           .data
		.cmd_rtc_ready          (scheduler_cmd_rtc_ready),                                                 //           .ready
		.resp_rtc_valid         (control_av_st_resp_valid),                                                //   resp_rtc.valid
		.resp_rtc_startofpacket (control_av_st_resp_startofpacket),                                        //           .startofpacket
		.resp_rtc_endofpacket   (control_av_st_resp_endofpacket),                                          //           .endofpacket
		.resp_rtc_data          (control_av_st_resp_data),                                                 //           .data
		.resp_rtc_ready         (control_av_st_resp_ready)                                                 //           .ready
	);

	alt_vip_control_slave #(
		.NUM_READ_REGISTERS             (0),
		.NUM_TRIGGER_REGISTERS          (18),
		.NUM_BLOCKING_TRIGGER_REGISTERS (0),
		.NUM_RW_REGISTERS               (1),
		.NUM_INTERRUPTS                 (0),
		.MM_CONTROL_REG_BYTES           (1),
		.MM_READ_REG_BYTES              (4),
		.MM_TRIGGER_REG_BYTES           (4),
		.MM_RW_REG_BYTES                (4),
		.MM_ADDR_WIDTH                  (7),
		.DATA_INPUT                     (0),
		.DATA_OUTPUT                    (0),
		.FAST_REGISTER_UPDATES          (0),
		.USE_MEMORY                     (0),
		.PIPELINE_READ                  (0),
		.PIPELINE_RESPONSE              (0),
		.PIPELINE_DATA                  (0),
		.SRC_WIDTH                      (8),
		.DST_WIDTH                      (8),
		.CONTEXT_WIDTH                  (8),
		.TASK_WIDTH                     (8),
		.RESP_SOURCE                    (1),
		.RESP_DEST                      (1),
		.RESP_CONTEXT                   (1),
		.DOUT_SOURCE                    (1),
		.USE_16BIT_ADDRESSING           (0)
	) control (
		.clock                       (main_clock_clk),                   //    main_clock.clk
		.reset                       (main_reset_reset),                 //    main_reset.reset
		.av_mm_control_address       (control_address),                  // av_mm_control.address
		.av_mm_control_byteenable    (control_byteenable),               //              .byteenable
		.av_mm_control_write         (control_write),                    //              .write
		.av_mm_control_writedata     (control_writedata),                //              .writedata
		.av_mm_control_read          (control_read),                     //              .read
		.av_mm_control_readdata      (control_readdata),                 //              .readdata
		.av_mm_control_readdatavalid (control_readdatavalid),            //              .readdatavalid
		.av_mm_control_waitrequest   (control_waitrequest),              //              .waitrequest
		.av_st_cmd_valid             (scheduler_cmd_rtc_valid),          //     av_st_cmd.valid
		.av_st_cmd_startofpacket     (scheduler_cmd_rtc_startofpacket),  //              .startofpacket
		.av_st_cmd_endofpacket       (scheduler_cmd_rtc_endofpacket),    //              .endofpacket
		.av_st_cmd_data              (scheduler_cmd_rtc_data),           //              .data
		.av_st_cmd_ready             (scheduler_cmd_rtc_ready),          //              .ready
		.av_st_resp_valid            (control_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (control_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (control_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (control_av_st_resp_data),          //              .data
		.av_st_resp_ready            (control_av_st_resp_ready)          //              .ready
	);

	alt_vip_packet_mux #(
		.NUM_INPUTS      (3),
		.REGISTER_OUTPUT (0),
		.PIPELINE_READY  (0),
		.NAME            ("undefined"),
		.SRC_WIDTH       (8),
		.DST_WIDTH       (8),
		.CONTEXT_WIDTH   (8),
		.TASK_WIDTH      (8),
		.DATA_WIDTH_INT  (24),
		.USER_WIDTH_INT  (0)
	) user_mux (
		.clock                    (main_clock_clk),                                                                                                      //  main_clock.clk
		.reset                    (main_reset_reset),                                                                                                    //  main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_mux_valid),                                                                                             //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_mux_startofpacket),                                                                                     //            .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_mux_endofpacket),                                                                                       //            .endofpacket
		.av_st_cmd_data           (scheduler_cmd_mux_data),                                                                                              //            .data
		.av_st_cmd_ready          (scheduler_cmd_mux_ready),                                                                                             //            .ready
		.av_st_din_valid          ({user_demux1_av_st_dout_1_valid,user_demux0_av_st_dout_1_valid,mixer_core_av_st_dout_valid}),                         // av_st_din_0.valid
		.av_st_din_startofpacket  ({user_demux1_av_st_dout_1_startofpacket,user_demux0_av_st_dout_1_startofpacket,mixer_core_av_st_dout_startofpacket}), //            .startofpacket
		.av_st_din_endofpacket    ({user_demux1_av_st_dout_1_endofpacket,user_demux0_av_st_dout_1_endofpacket,mixer_core_av_st_dout_endofpacket}),       //            .endofpacket
		.av_st_din_data           ({user_demux1_av_st_dout_1_data[55:0],user_demux0_av_st_dout_1_data[55:0],mixer_core_av_st_dout_data[55:0]}),          //            .data
		.av_st_din_ready          ({user_mux_av_st_din_ready[2],user_mux_av_st_din_ready[1],user_mux_av_st_din_ready[0]}),                               //            .ready
		.av_st_dout_valid         (user_mux_av_st_dout_valid),                                                                                           //  av_st_dout.valid
		.av_st_dout_startofpacket (user_mux_av_st_dout_startofpacket),                                                                                   //            .startofpacket
		.av_st_dout_endofpacket   (user_mux_av_st_dout_endofpacket),                                                                                     //            .endofpacket
		.av_st_dout_data          (user_mux_av_st_dout_data),                                                                                            //            .data
		.av_st_dout_ready         (user_mux_av_st_dout_ready)                                                                                            //            .ready
	);

	assign vib_resp0_av_st_resp_ready = { scheduler_resp_vib_ready[0] };

	assign scheduler_cmd_vib_0_valid = { scheduler_cmd_vib_valid[0] };

	assign scheduler_cmd_vib_0_data = { scheduler_cmd_vib_data[63:0] };

	assign scheduler_cmd_vib_0_startofpacket = { scheduler_cmd_vib_startofpacket[0] };

	assign scheduler_cmd_vib_0_endofpacket = { scheduler_cmd_vib_endofpacket[0] };

	assign vib_resp1_av_st_resp_ready = { scheduler_resp_vib_ready[1] };

	assign scheduler_cmd_vib_1_valid = { scheduler_cmd_vib_valid[1] };

	assign scheduler_cmd_vib_1_data = { scheduler_cmd_vib_data[127:64] };

	assign scheduler_cmd_vib_1_startofpacket = { scheduler_cmd_vib_startofpacket[1] };

	assign scheduler_cmd_vib_1_endofpacket = { scheduler_cmd_vib_endofpacket[1] };

	assign user_demux0_av_st_dout_0_valid = { user_demux0_av_st_dout_valid[0] };

	assign user_demux0_av_st_dout_0_data = { user_demux0_av_st_dout_data[55:0] };

	assign user_demux0_av_st_dout_0_ready = { mixer_core_av_st_din_ready[0] };

	assign user_demux0_av_st_dout_0_startofpacket = { user_demux0_av_st_dout_startofpacket[0] };

	assign user_demux0_av_st_dout_0_endofpacket = { user_demux0_av_st_dout_endofpacket[0] };

	assign user_demux0_av_st_dout_1_valid = { user_demux0_av_st_dout_valid[1] };

	assign user_demux0_av_st_dout_1_data = { user_demux0_av_st_dout_data[111:56] };

	assign user_demux0_av_st_dout_1_ready = { user_mux_av_st_din_ready[1] };

	assign user_demux0_av_st_dout_1_startofpacket = { user_demux0_av_st_dout_startofpacket[1] };

	assign user_demux0_av_st_dout_1_endofpacket = { user_demux0_av_st_dout_endofpacket[1] };

	assign user_demux1_av_st_dout_0_valid = { user_demux1_av_st_dout_valid[0] };

	assign user_demux1_av_st_dout_0_data = { user_demux1_av_st_dout_data[55:0] };

	assign user_demux1_av_st_dout_0_ready = { mixer_core_av_st_din_ready[1] };

	assign user_demux1_av_st_dout_0_startofpacket = { user_demux1_av_st_dout_startofpacket[0] };

	assign user_demux1_av_st_dout_0_endofpacket = { user_demux1_av_st_dout_endofpacket[0] };

	assign user_demux1_av_st_dout_1_valid = { user_demux1_av_st_dout_valid[1] };

	assign user_demux1_av_st_dout_1_data = { user_demux1_av_st_dout_data[111:56] };

	assign user_demux1_av_st_dout_1_ready = { user_mux_av_st_din_ready[2] };

	assign user_demux1_av_st_dout_1_startofpacket = { user_demux1_av_st_dout_startofpacket[1] };

	assign user_demux1_av_st_dout_1_endofpacket = { user_demux1_av_st_dout_endofpacket[1] };

	assign mixer_core_av_st_dout_ready = { user_mux_av_st_din_ready[0] };

endmodule
